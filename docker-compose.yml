version: "3.3"

services:
  bot:
    container_name: "${BOT_NAME}-bot"
    build:
      context: .
    stop_signal: SIGINT
    command: python bot.py
    restart: always
    ports:
      - "8443:8443"
    env_file:
      - ".env"
    environment:
      DB_HOST: "${BOT_NAME}-database"
      REDIS_HOST: "${BOT_NAME}-redis"
    volumes:
      - .:/src
    depends_on:
      - database
      - redis
    networks:
      - botnet

  database:
    container_name: "${BOT_NAME}-database"
    image: postgres:13-alpine
    expose:
      - 5432
    restart: always
    volumes:
      - "./pgdata:/var/lib/postgresql/data"
    command: "postgres -c max_connections=150 -c shared_buffers=512MB -c effective_cache_size=1536MB
              -c maintenance_work_mem=128MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB
              -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200
              -c work_mem=3495kB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=2
              -c max_parallel_workers_per_gather=1 -c max_parallel_workers=2 -c max_parallel_maintenance_workers=1"
    env_file:
      - ".env"
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_DB: $DB_NAME
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    networks:
      - botnet

  redis:
    container_name: "${BOT_NAME}-redis"
    image: redis:alpine
    env_file:
      - ".env"
    expose:
      - 6379
    command: redis-server --requirepass $REDIS_PASS
    volumes:
      - ./redisdata:/var/lib/redis
    restart: always
    networks:
      - botnet

networks:
  botnet:
    driver: bridge
